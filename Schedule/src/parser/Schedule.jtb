/**
 * JTB template file created by SF JavaCC plugin 1.5.17+ wizard for JTB 1.4.0.2+ and JavaCC 1.5.0+
 */options{  JDK_VERSION = "1.5";  static = true;  JTB_P = "parser";
}PARSER_BEGIN(ScheduleParser)package parser;
// this import is not needed as it is generated by JTB
// import parsersyntaxtree.*;
// this import is needed as it is not generated by JTB
import parser.visitor.*;
public class ScheduleParser{  }PARSER_END(ScheduleParser)SKIP :
{
  " "
| "\r"
| "\t"
| "\n"
}

void Scope() : { }
{
	Declarations() Body() < EOF >
}

void Declarations() : { }
{
	( TimeZoneDeclaration() )? ( VariableDeclaration() )*
}

void TimeZoneDeclaration() : { }
{
	"timeZone" "=" < TIMEZONE >
}

void VariableDeclaration() : { }
{
	PersonDeclaration() | LocationDeclaration()
}

void PersonDeclaration() : { }
{
	"person" < ID > "=" < MAIL >
}

void LocationDeclaration() : { }
{
	"location" < ID > "=" < STRING >
}

void Body() : { }
{
	( Day() )*
}

void Day() : { }
{
	"on" DayDate() "{" Duration() Doing() ( Partecipants() )? ( Location() )? ( Repeating() )? "}"
}

void DayDate() : { }
{
  < INTEGER > "-" < INTEGER > "-" < INTEGER >}

void Duration() : { }
{
	AllDayDuration() | FromToDuration()
}

void AllDayDuration() : { }
{
  "allDay"
}

void FromToDuration() : { }
{
  "from" TimeEvent() "to" TimeEvent()
}

void TimeEvent() : { }
{
  < INTEGER > ":" < INTEGER >}  

void Doing() : { }
{
  "do" < STRING >
}

void Partecipants() : { }
{
	"with" Partecipant() ( OthersPartecipants() )*
}

void OthersPartecipants() : { }
{
  "," Partecipant()
}

void Partecipant() : { }
{
  < ID > | < MAIL >
}

void Location() : { }
{
  "at" Place()
}

void Place() : { }
{
  < ID > | < STRING >
}

void Repeating() : { }
{
	"repeating" RepeatingTime() RepeatingStop()
}

void RepeatingTime() : { }
{
	"every" < INTEGER > "days"
}

void RepeatingStop() : { }
{
  "untill" DayDate()
}

TOKEN :
{
 	< INTEGER : (< DIGIT >)+ >	|
 	< DIGIT: ["0"-"9"] >	|
 	< CHAR: ["A"-"Z"] | ["a"-"z"]>  |
 	< ID: <CHAR> (<CHAR> | <DIGIT>)*>	|
	< TIMEZONE : (< CHAR >)+ "/" (< CHAR >)* > |
	< STRING : "\"" < STRINGANY > "\"" > |
	< STRINGANY : (< CHAR > | < DIGIT > | "_" | "." )+ > |
	< MAIL : "\"" < STRINGANY > "@" < STRINGANY > "." < STRINGANY > "\"" >
}